/*
 * Copyright (c) 2015 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
 
#include "bluetooth_class.h"
#include "common/logger.h"

#include <map>

namespace extension {
namespace bluetooth {

std::map<bt_major_device_class_e, unsigned long> g_major_enum_map = {
    {BT_MAJOR_DEVICE_CLASS_MISC, 0x00},
    {BT_MAJOR_DEVICE_CLASS_COMPUTER, 0x01},
    {BT_MAJOR_DEVICE_CLASS_PHONE, 0x02},
    {BT_MAJOR_DEVICE_CLASS_LAN_NETWORK_ACCESS_POINT, 0x03},
    {BT_MAJOR_DEVICE_CLASS_AUDIO_VIDEO, 0x04},
    {BT_MAJOR_DEVICE_CLASS_PERIPHERAL, 0x05},
    {BT_MAJOR_DEVICE_CLASS_IMAGING, 0x06},
    {BT_MAJOR_DEVICE_CLASS_WEARABLE, 0x07},
    {BT_MAJOR_DEVICE_CLASS_TOY, 0x08},
    {BT_MAJOR_DEVICE_CLASS_HEALTH, 0x09},
    {BT_MAJOR_DEVICE_CLASS_UNCATEGORIZED, 0x1F}
};

std::map<bt_minor_device_class_e, unsigned long> g_minor_enum_map = {
    {BT_MINOR_DEVICE_CLASS_COMPUTER_UNCATEGORIZED, 0x00},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_DESKTOP_WORKSTATION , 0x01},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_SERVER_CLASS , 0x02},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_LAPTOP , 0x03},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_HANDHELD_PC_OR_PDA , 0x04},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_PALM_SIZED_PC_OR_PDA, 0x5},
    {BT_MINOR_DEVICE_CLASS_COMPUTER_WEARABLE_COMPUTER , 0x06},
    {BT_MINOR_DEVICE_CLASS_PHONE_UNCATEGORIZED , 0x00},
    {BT_MINOR_DEVICE_CLASS_PHONE_CELLULAR , 0x01},
    {BT_MINOR_DEVICE_CLASS_PHONE_CORDLESS , 0x02},
    {BT_MINOR_DEVICE_CLASS_PHONE_SMART_PHONE , 0x03},
    {BT_MINOR_DEVICE_CLASS_PHONE_WIRED_MODEM_OR_VOICE_GATEWAY , 0x04},
    {BT_MINOR_DEVICE_CLASS_PHONE_COMMON_ISDN_ACCESS , 0x05},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_UNCATEGORIZED , 0x00},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_WEARABLE_HEADSET , 0x01},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_HANDS_FREE , 0x02},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_MICROPHONE , 0x04},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_LOUDSPEAKER , 0x05},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_HEADPHONES , 0x06},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_PORTABLE_AUDIO , 0x07},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_CAR_AUDIO , 0x08},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_SET_TOP_BOX , 0x09},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_HIFI_AUDIO_DEVICE , 0x0a},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_VCR , 0x0b},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_VIDEO_CAMERA , 0x0c},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_CAMCORDER , 0x0d},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_VIDEO_MONITOR , 0x0e},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_VIDEO_DISPLAY_LOUDSPEAKER , 0x0f},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_VIDEO_CONFERENCING , 0x10},
    {BT_MINOR_DEVICE_CLASS_AUDIO_VIDEO_GAMING_TOY , 0x12},
    {BT_MINOR_DEVICE_CLASS_PERIPHERA_UNCATEGORIZED , 0},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_KEY_BOARD , 0x10},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_POINTING_DEVICE , 0x20},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_COMBO_KEYBOARD_POINTING_DEVICE , 0x30},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_JOYSTICK , 0x01},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_GAME_PAD , 0x02},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_REMOTE_CONTROL , 0x03},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_SENSING_DEVICE , 0x04},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_DIGITIZER_TABLET , 0x05},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_CARD_READER , 0x06},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_DIGITAL_PEN , 0x07},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_HANDHELD_SCANNER , 0x08},
    {BT_MINOR_DEVICE_CLASS_PERIPHERAL_HANDHELD_GESTURAL_INPUT_DEVICE , 0x09},
    {BT_MINOR_DEVICE_CLASS_IMAGING_DISPLAY , 0x04},
    {BT_MINOR_DEVICE_CLASS_IMAGING_CAMERA , 0x08},
    {BT_MINOR_DEVICE_CLASS_IMAGING_SCANNER , 0x10},
    {BT_MINOR_DEVICE_CLASS_IMAGING_PRINTER, 0x20},
    {BT_MINOR_DEVICE_CLASS_WEARABLE_WRIST_WATCH , 0x01},
    {BT_MINOR_DEVICE_CLASS_WEARABLE_PAGER , 0x02},
    {BT_MINOR_DEVICE_CLASS_WEARABLE_JACKET , 0x03},
    {BT_MINOR_DEVICE_CLASS_WEARABLE_HELMET , 0x04},
    {BT_MINOR_DEVICE_CLASS_WEARABLE_GLASSES , 0x05},
    {BT_MINOR_DEVICE_CLASS_TOY_ROBOT , 0x01},
    {BT_MINOR_DEVICE_CLASS_TOY_VEHICLE , 0x02},
    {BT_MINOR_DEVICE_CLASS_TOY_DOLL_ACTION , 0x03},
    {BT_MINOR_DEVICE_CLASS_TOY_CONTROLLER , 0x04},
    {BT_MINOR_DEVICE_CLASS_TOY_GAME , 0x05},
    {BT_MINOR_DEVICE_CLASS_HEALTH_UNCATEGORIZED , 0x00},
    {BT_MINOR_DEVICE_CLASS_HEALTH_BLOOD_PRESSURE_MONITOR , 0x01},
    {BT_MINOR_DEVICE_CLASS_HEALTH_THERMOMETER , 0x02},
    {BT_MINOR_DEVICE_CLASS_HEALTH_WEIGHING_SCALE , 0x03},
    {BT_MINOR_DEVICE_CLASS_HEALTH_GLUCOSE_METER , 0x04},
    {BT_MINOR_DEVICE_CLASS_HEALTH_PULSE_OXIMETER , 0x05},
    {BT_MINOR_DEVICE_CLASS_HEALTH_HEART_PULSE_RATE_MONITOR , 0x06},
    {BT_MINOR_DEVICE_CLASS_HEALTH_DATA_DISPLAY , 0x07},
    {BT_MINOR_DEVICE_CLASS_HEALTH_STEP_COUNTER , 0x08},
    {BT_MINOR_DEVICE_CLASS_HEALTH_BODY_COMPOSITION_ANALYZER , 0x09},
    {BT_MINOR_DEVICE_CLASS_HEALTH_PEAK_FLOW_MONITOR , 0x0a},
    {BT_MINOR_DEVICE_CLASS_HEALTH_MEDICATION_MONITOR , 0x0b},
    {BT_MINOR_DEVICE_CLASS_HEALTH_KNEE_PROSTHESIS , 0x0c},
    {BT_MINOR_DEVICE_CLASS_HEALTH_ANKLE_PROSTHESIS , 0x0d}
};

std::map<bt_major_service_class_e, unsigned long> g_service_enum_map = {
    {BT_MAJOR_SERVICE_CLASS_LIMITED_DISCOVERABLE_MODE, 0x0001},
    {BT_MAJOR_SERVICE_CLASS_POSITIONING, 0x0008},
    {BT_MAJOR_SERVICE_CLASS_NETWORKING, 0x0010},
    {BT_MAJOR_SERVICE_CLASS_RENDERING, 0x0020},
    {BT_MAJOR_SERVICE_CLASS_CAPTURING, 0x0040},
    {BT_MAJOR_SERVICE_CLASS_OBJECT_TRANSFER, 0x0080},
    {BT_MAJOR_SERVICE_CLASS_AUDIO, 0x0100},
    {BT_MAJOR_SERVICE_CLASS_TELEPHONY, 0x0200},
    {BT_MAJOR_SERVICE_CLASS_INFORMATION, 0x0400}
};

unsigned long BluetoothClass::GetMajorValue(bt_major_device_class_e major)
{
  LoggerD("Enter");
  auto iter = g_major_enum_map.find(major);
  if (iter != g_major_enum_map.end()) {
    return iter->second;
  }

  return 0;
}

unsigned long BluetoothClass::GetMinorValue(bt_minor_device_class_e minor)
{
  LoggerD("Enter");
  auto iter = g_minor_enum_map.find(minor);
  if (iter != g_minor_enum_map.end()) {
    return iter->second;
  }

  return 0;
}

std::vector<unsigned long> BluetoothClass::getServiceValues(int serviceMask)
{
  LoggerD("Enter");
  std::vector<unsigned long> ret;
  for (auto iter = g_service_enum_map.begin(); iter != g_service_enum_map.end(); iter++) {
    if (iter->first & serviceMask) {
      ret.push_back(iter->second);
    }
  }

  return ret;
}

} // namespace bluetooth
} // namespace extension
